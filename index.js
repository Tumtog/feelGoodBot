require("dotenv").config();
const { Bot, InlineKeyboard } = require("grammy");
const cron = require("node-cron");
const express = require("express");
const bodyParser = require("body-parser");
const fetch = require("node-fetch"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã fetch
const customFetch = (url, options) => {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  return fetch(url, {
    ...options,
    retry: 3, // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    retryDelay: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
  });
};

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º fetch
const bot = new Bot(process.env.BOT_API_KEY, { fetch: customFetch });
const app = express();
app.use(bodyParser.json());

const webhookUrl = "https://feel-good-7ttut77ol-tumtogs-projects.vercel.app/webhook";

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
const setWebhook = async () => {
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.api.deleteWebhook();
    console.log("Webhook deleted successfully");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
    const webhookInfo = await bot.api.getWebhookInfo();
    if (webhookInfo.url) {
      console.log("Webhook still exists, retrying...");
      await new Promise(resolve => setTimeout(resolve, 5000));
      await bot.api.deleteWebhook(); // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–Ω–æ–≤–∞
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 5000));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    await bot.api.setWebhook(webhookUrl);
    console.log("Webhook set successfully");
  } catch (err) {
    console.error("Error setting webhook:", err);
  }
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setWebhook();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post("/webhook", (req, res) => {
  bot.handleUpdate(req.body).catch(err => {
    console.error("Error handling update:", err);
  });
  res.sendStatus(200);
});

app.listen(3000, () => {
  console.log("Server is running on port 3000");
});

// –ü–æ—Ö–≤–∞–ª—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω
const womenCompliments = [
  "–¢–∏ —á—É–¥–æ–≤–æ —Å–ø—Ä–∞–≤–ª—è—î—à—Å—è! üåü",
  "–¢–∏ –≤–∏–≥–ª—è–¥–∞—î—à –ø—Ä–∏–≥–æ–ª–æ–º—à–ª–∏–≤–æ! üòç",
  // –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
];

// –ü–æ—Ö–≤–∞–ª—ã –¥–ª—è –º—É–∂—á–∏–Ω
const menCompliments = [
  "–¢–∏ —á—É–¥–æ–≤–æ —Å–ø—Ä–∞–≤–ª—è—î—à—Å—è! üí™",
  "–¢–∏ –≤–∏–≥–ª—è–¥–∞—î—à –ø—Ä–∏–≥–æ–ª–æ–º—à–ª–∏–≤–æ! üòé",
  // –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
];

// –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ö–≤–∞–ª—ã –¥–ª—è –°–Ω—ñ–∂–∞–Ω–∏
const snezhanaCompliments = [
  "–°–Ω—ñ–∂–∞–Ω–∞, —Ç–∏ –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ–≤–∞! üåü",
  "–ú–æ—è –°–Ω—ñ–∂–∞–Ω–∞, —Ç–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∞! üòç",
  // –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
];

const snezhanaId = 408453544; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –°–Ω—ñ–∂–∞–Ω—ã
const userGender = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId

const getRandomCompliment = (compliments) => {
  return compliments[Math.floor(Math.random() * compliments.length)];
};

const sendRandomCompliment = async (chatId, compliments) => {
  const compliment = getRandomCompliment(compliments);
  await bot.api.sendMessage(chatId, compliment);
};

const getRandomTime = (startHour, startMinute, endHour, endMinute) => {
  const start = new Date();
  start.setHours(startHour, startMinute, 0, 0);
  const end = new Date();
  end.setHours(endHour, endMinute, 0, 0);

  const randomTime = new Date(
    start.getTime() + Math.random() * (end.getTime() - start.getTime())
  );
  return {
    hour: randomTime.getHours(),
    minute: randomTime.getMinutes(),
  };
};

const scheduleDailyMessages = (chatId, compliments) => {
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 8:00
  cron.schedule("0 8 * * *", () => sendRandomCompliment(chatId, compliments), {
    scheduled: true,
    timezone: "Europe/Kiev",
  });

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 22:30
  cron.schedule(
    "30 22 * * *",
    () => sendRandomCompliment(chatId, compliments),
    {
      scheduled: true,
      timezone: "Europe/Kiev",
    }
  );

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
  for (let i = 0; i < 5; i++) {
    const { hour, minute } = getRandomTime(8, 1, 22, 29); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 8:00 –∏ 22:30
    cron.schedule(
      `${minute} ${hour} * * *`,
      () => sendRandomCompliment(chatId, compliments),
      {
        scheduled: true,
        timezone: "Europe/Kiev",
      }
    );
  }
};

bot.command("start", async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  if (userId === snezhanaId) {
    await ctx.reply("–ü—Ä–∏–≤—ñ—Ç, –°–Ω—ñ–∂–∞–Ω–∞!");
    scheduleDailyMessages(chatId, snezhanaCompliments);
    sendRandomCompliment(chatId, snezhanaCompliments);
  } else {
    const genderKeyboard = new InlineKeyboard()
      .text("–ñ–µ–Ω—â–∏–Ω–∞", "gender_female")
      .text("–ú—É–∂—á–∏–Ω–∞", "gender_male");

    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", {
      reply_markup: genderKeyboard,
    });
  }
});

bot.on("callback_query", async (ctx) => {
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;

  if (data === "gender_female") {
    userGender[chatId] = "female"; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await ctx.reply("üî•");
    scheduleDailyMessages(chatId, womenCompliments);
    sendRandomCompliment(chatId, womenCompliments);
    await ctx.deleteMessage();
  } else if (data === "gender_male") {
    userGender[chatId] = "male"; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await ctx.reply("üî•");
    scheduleDailyMessages(chatId, menCompliments);
    sendRandomCompliment(chatId, menCompliments);
    await ctx.deleteMessage();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id;

  if (!userGender[chatId]) {
    // –ï—Å–ª–∏ –ø–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    const genderKeyboard = new InlineKeyboard()
      .text("–ñ–µ–Ω—â–∏–Ω–∞", "gender_female")
      .text("–ú—É–∂—á–∏–Ω–∞", "gender_male");

    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", {
      reply_markup: genderKeyboard,
    });
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ö–≤–∞–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
    const compliments =
      userGender[chatId] === "female" ? womenCompliments : menCompliments;
    sendRandomCompliment(chatId, compliments);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("Error occurred:", err);
});

bot.start();

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
